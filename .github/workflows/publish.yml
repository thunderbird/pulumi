---
name: deploy-staging-and-create-release

concurrency:
  group: deploy-staging
  cancel-in-progress: true

on:
  push:  # Fix: on release
    branches:
      - main

permissions:
    contents: read

jobs:

  # This job detects which parts of the repo have been changed, setting future jobs up for conditional behavior.
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      docs: ${{ steps.check.outputs.docs }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: check
        with:
          filters: |
            docs:
              - 'docs/**'

  detect-versions:
    needs: detect-changes
    if: needs.detect-changes.outputs.docs == 'true'
    runs-on: ubuntu-latest
    outputs:
      branch-exists: ${{ steps.branch-exists.outputs.exists }}
      version: v${{ steps.version.outputs.value }}
    steps:
      # Detect version from pyproject.toml
      - uses: actions/checkout@v4
      - uses: SebRollen/toml-action@v1.2.0
        id: version
        with:
          file: './pyproject.toml'
          field: project.version
      - uses: GuillaumeFalourd/branch-exists@v1
        id: branch-exists
        with:
          branch: v${{ steps.version.outputs.value }}


  # The below code is commented out because it works, except for a Github auth issue.
  # Ref: https://github.com/orgs/community/discussions/13836

  # When the PR gets merged, cut a new version branch.
  # merge:
  #   needs: detect-versions
  #   if: github.event.pull_request.merged == true && needs.detect-versions.outputs.branch-exists == 'false'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Create a new version branch
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       shell: bash
  #       run: |
  #         git checkout -b ${{ needs.detect-versions.outputs.version }}
  #         git push -u origin ${{ needs.detect-versions.outputs.version }}